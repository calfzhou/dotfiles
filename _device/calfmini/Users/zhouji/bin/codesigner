#!/bin/bash

# CodeSigner
# version 0.9.3 beta 4
# Platypus application
# shell script version: codesigner

# initial
process="CodeSigner"
version="0.93"
vmisc=" beta 4"
account=$(id -un)

# unsupported OS warning function
_warning () {
	echo "Error: CodeSigner needs at least OS X 10.8 (Mountain Lion)"
	echo "Exiting..."
	osascript &>/dev/null << EOT
set theAlertText to "Error: unsupported operating system!"
set theAlertMessage to "CodeSigner needs at least OS X 10.8 (Mountain Lion) for Platypus and Notification Center support. However, you can always use the shell script version 'codesigner'."
display alert theAlertText message theAlertMessage as critical buttons {"OK"} default button "OK"
EOT
	exit
}

# check macOS version
prodv=$(sw_vers -productVersion | awk -F. '{print $2}')

# check runtime context
mypath="$0"
mypath_short="${mypath/#$HOME/~}"
scr_parent=$(dirname "$mypath")
scrp_name=$(basename "$scr_parent")
if [[ $scrp_name == "Resources" ]] ; then
	runtime=true
	echo "$process v$version$vmisc"
	if [[ $prodv -lt 8 ]] ; then
		_warning
	fi
	icon_loc="$scr_parent/CodeSigner.icns"
else
	runtime=false
	echo "$(basename $0) v$version$vmisc"
	icon_loc="/System/Library/PreferencePanes/Security.prefPane/Contents/Resources/FileVault.icns"
fi

# Apple intermediate certificates (Authority Key Identifiers)
read -d '' akids <<"EOF"
88271709A9B618608BECEBBAF64759C55254A3B7
5717EDA2CFDC7C98A110E0FCBE872D2CF2E31754
8E69A6C477424E04A556429C511F86DAD2208F09
EOF

# beep function
_beep () {
	osascript -e "beep"
}

# success sound function
_success () {
	afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/burn complete.aif"
}

# authority function
_authority () {
	sig=$(codesign -dvvvv "$filepath" 2>&1)
	if [[ $sig ]] ; then
		if [[ $(echo "$sig" | grep "code object is not signed at all$") ]] ; then
			echo "unsigned"
		else
			auth=$(echo "$sig" | grep "^Authority=" | head -n 1 | awk -F= '{print $2}')
			if ! [[ $auth ]] ; then
				if [[ $(echo "$sig" | grep "^Signature=adhoc$") ]] ; then
					echo "ad-hoc"
				else
					echo "unknown"
				fi
			else
				if [[ $auth == "(unavailable)" ]] ; then
					echo "signed without valid root"
				else
					echo "$auth"
				fi
			fi
		fi
	else
		echo "unknown"
	fi
}

# notify function
_notify () {
	if [[ $tn_status == osa ]] ; then
		osascript &>/dev/null << EOT
tell application "System Events"
	display notification "$2" with title "$process [" & "$account" & "]" subtitle "$1"
end tell
EOT
	elif [[ $tn_status == tn-app-new ]] || [[ $tn_status == tn-app-old ]] ; then
		"$tn_loc/Contents/MacOS/terminal-notifier" \
			-title "$process [$account]" \
			-subtitle "$1" \
			-message "$2" \
			-appIcon "$icon_loc" \
			>/dev/null
	elif [[ $tn_status == tn-cli ]] ; then
		"$tn" \
			-title "$process [$account]" \
			-subtitle "$1" \
			-message "$2" \
			-appIcon "$icon_loc" \
			>/dev/null
	fi
}

# look for terminal-notifier (only on Yosemite and later)
if [[ $prodv -lt 10 ]] ; then
	if [[ $prodv -lt 8 ]] ; then
		if $runtime ; then
			_warning
		else
			tn_status="none"
		fi
	else
		tn_status="osa"
	fi
else
	if $runtime ; then
		tn_status="tn-app-new"
		tn_loc="$scr_parent/terminal-notifier.app"
	fi
	if ! [[ -d "$tn_loc" ]] ; then
		tn=$(command -v terminal-notifier 2>/dev/null)
		if ! [[ $tn ]] ; then
			tn_loc=$(mdfind \
				-onlyin /Applications/ \
				-onlyin $HOME/Applications/ \
				-onlyin /Developer/Applications/ \
				-onlyin $HOME/Developer/Applications/ \
				-onlyin /Network/Applications/ \
				-onlyin /Network/Developer/Applications/ \
				-onlyin /usr/local/Cellar/terminal-notifier/ \
				-onlyin /opt/local/ \
				-onlyin /sw/ \
				"kMDItemCFBundleIdentifier == 'fr.julienxx.oss.terminal-notifier'" 2>/dev/null | LC_COLLATE=C sort | awk 'NR==1')
			if ! [[ $tn_loc ]] ; then
				tn_loc=$(mdfind \
					-onlyin /Applications/ \
					-onlyin $HOME/Applications/ \
					-onlyin /Developer/Applications/ \
					-onlyin $HOME/Developer/Applications/ \
					-onlyin /Network/Applications/ \
					-onlyin /Network/Developer/Applicationsv \
					-onlyin /usr/local/Cellar/terminal-notifier/ \
					-onlyin /opt/local/ \
					-onlyin /sw/ \
					"kMDItemCFBundleIdentifier == 'nl.superalloy.oss.terminal-notifier'" 2>/dev/null | LC_COLLATE=C sort | awk 'NR==1')
				if ! [[ $tn_loc ]] ; then
					tn_status="osa"
				else
					tn_status="tn-app-old"
				fi
			else
				tn_status="tn-app-new"
			fi
		else
			tn_vers=$("$tn" -help | head -1 | awk -F'[()]' '{print $2}' | awk -F. '{print $1"."$2}')
			if (( $(echo "$tn_vers >= 1.8" | bc -l) )) && (( $(echo "$tn_vers < 2.0" | bc -l) )) ; then
				tn_status="tn-cli"
			else
				tn_loc=$(mdfind \
					-onlyin /Applications/ \
					-onlyin $HOME/Applications/ \
					-onlyin /Developer/Applications/ \
					-onlyin $HOME/Developer/Applications/ \
					-onlyin /Network/Applications/ \
					-onlyin /Network/Developer/Applications/ \
					-onlyin /usr/local/Cellar/terminal-notifier/ \
					-onlyin /opt/local/ \
					-onlyin /sw/ \
					"kMDItemCFBundleIdentifier == 'fr.julienxx.oss.terminal-notifier'" 2>/dev/null | LC_COLLATE=C sort | awk 'NR==1')
				if ! [[ $tn_loc ]] ; then
					tn_loc=$(mdfind \
						-onlyin /Applications/ \
						-onlyin $HOME/Applications/ \
						-onlyin /Developer/Applications/ \
						-onlyin $HOME/Developer/Applications/ \
						-onlyin /Network/Applications/ \
						-onlyin /Network/Developer/Applications/ \
						-onlyin /usr/local/Cellar/terminal-notifier/ \
						-onlyin /opt/local/ \
						-onlyin /sw/ \
						"kMDItemCFBundleIdentifier == 'nl.superalloy.oss.terminal-notifier'" 2>/dev/null | LC_COLLATE=C sort | awk 'NR==1')
					if ! [[ $tn_loc ]] ; then
						tn_status="osa"
					else
						tn_status="tn-app-old"
					fi
				else
					tn_status="tn-app-new"
				fi
			fi
		fi
	fi
fi
if [[ $tn_status == "osa" ]] ; then
	echo "Notifications: AppleScript"
elif [[ $tn_status == "none" ]] ; then
	echo "Notifications: n/a"
else
	tnloc_short="${tn_loc/#$HOME/~}"
	echo "Notifications: $tnloc_short"
fi

# check for missing Xcode or CLT installation
if ! [[ $(command -v codesign_allocate 2>/dev/null) ]] ; then # codesign_allocate not found: nothing installed
	_beep &
	echo "ERROR: you must first install Xcode or the Command Line Tools!"
	_notify "⚠️ Error: developer path" "Xcode or CLT missing!"
	exit
else
	dev_path=$(xcode-select -p 2>/dev/null)
	if ! [[ $dev_path ]] ; then # no developer path returned
		_beep &
		echo "ERROR: you must first install Xcode or the Command Line Tools!"
		_notify "⚠️ Error: developer path" "Xcode or CLT missing!"
		exit
	else
		if ! [[ -d $dev_path ]] ; then # developer path doesn't exist
			_beep &
			echo "ERROR: you must first install Xcode or the Command Line Tools!"
			_notify "⚠️ Error: developer path" "Xcode or CLT missing!"
			exit
		else # check if codesign_allocate exists in developer path
			if ! [[ -f "$dev_path/Toolchains/XcodeDefault.xctoolchain/usr/bin/codesign_allocate" ]] \
				&& ! [[ -f "$dev_path/usr/bin/codesign_allocate" ]] && ! [[ -f "$dev_path/CommandLineTools/usr/bin/codesign_allocate" ]] ; then
				_beep &
				echo "ERROR: you must first install Xcode or the Command Line Tools!"
				_notify "⚠️ Error: developer path" "Xcode or CLT missing!"
				exit
			else
				dev_shortpath="${dev_path/#$HOME/~}"
				echo "Developer path: $dev_shortpath"
			fi
		fi
	fi
fi

# check for missing arguments
if ! [[ $@ ]] ; then
	_beep &
	echo "ERROR: target file missing!"
	_notify "⚠️ Error!" "Target file missing"
	exit
fi

# certificate lists for standard and root execution
csc_kch=$(security find-identity -p codesigning -v 2>/dev/null | awk -F\" '{print $2}')
csc_all=$(echo -e "$csc_kch\nAd-hoc signature" | sort)
csc_rootr=$(echo "$csc_kch" | sort | grep -e "^Developer ID Application: " -e "^Mac Developer: ")
while read csc
do
	akid=$(security find-certificate -c "$csc" -p | openssl x509 -inform PEM -noout -text -fingerprint \
		| grep -A1 "Authority Key Identifier" | tail -1 | xargs | sed -e 's/://g' -e 's/^keyid//')
	! [[ $(echo "$akids" | grep "$akid") ]] && csc_rootr=$(echo "$csc_rootr" | grep -v "^$csc$")
done < <(echo "$csc_rootr" | grep -v "^$")
csc_root=$(echo -e "$csc_rootr\nAd-hoc signature" | sort)

# main
for filepath in "$@"
do

! [[ $filepath ]] && continue

filename=$(basename "$filepath")
nfilename=$(echo "$filename" | sed 's/^\"/\\\"/') # escape for terminal-notifier
suffix="${filename##*.}"
shortpath="${filepath/#$HOME/~}"
echo "--------"
echo "Accessing: $shortpath"

# check for missing target
if ! [[ -a $filepath ]] ; then
	_beep &
	echo "ERROR: file does not exist (anymore)!"
	_notify "⚠️ File does not exist (anymore)!" "$shortpath"
	continue
fi

# current authority
auth_current=$(_authority)
echo "Current authority: $auth_current"

# determine codesign mode
if [[ -d "$filepath" ]] ; then # directory (bundles, sparsebundle)
	regular=false
	if [[ $suffix == sparsebundle ]] ; then # sparsebundle
		if ! [[ -f "$filepath/Info.plist" ]] ; then # not a proper sparsebundle
			echo "Not a proper sparsebundle: $shortpath"
			_beep &
			_notify "⚠️ Not a proper sparsebundle!" "$shortpath"
			continue
		fi
		deep=false
		bundleid="skipped"
		echo "Target: main bundle (simple)"
	else # app, prefPane, framework, appex, kext, component, plugin, bundle, xpc etc.
		if ! [[ -f "$filepath/Contents/Info.plist" ]] && ! [[ -f "$filepath/Resources/Info.plist" ]] ; then # not a proper bundle
			echo "Not a proper bundle: $shortpath"
			_beep &
			_notify "⚠️ Not a proper bundle!" "$shortpath"
			continue
		fi
		method=$(osascript 2>/dev/null << EOT
tell application "System Events"
	activate
	set theLogoPath to POSIX file "$icon_loc"
	set theButton to button returned of (display dialog "Please select the code-signing mode for '$filename'." ¬
		buttons {"Cancel", "Deep", "Simple"} ¬
		default button 3 ¬
		with title "CodeSigner" ¬
		with icon file theLogoPath ¬
		giving up after 180)
end tell
EOT
		)
		if [[ $method == "Simple" ]] ; then
			deep=false
			echo "Target: main bundle (simple)"
			bundleid=$(defaults read "$filepath/Contents/Info.plist" CFBundleIdentifier 2>/dev/null)
			! [[ $bundleid ]] && bundleid="none"
		elif [[ $method == "Deep" ]] ; then
			deep=true
			bundleid="skipped"
			echo "Target: main bundle & nested code (deep)"
		else
			echo "User canceled"
			continue
		fi
	fi
else # single file: executable, DMG, dylib etc.
	regular=true
	deep=false
	bundleid="skipped"
	echo "Target: single file"
fi
echo "Bundle ID argument: $bundleid"

# check for owner other than effective user
owner=$(stat -f '%Su' "$filepath")
if [[ $owner != $account ]] ; then
	root=true
	echo "Owner: $owner"
	[[ $csc_rootr ]] && echo "Skipping certificates with invalid roots"
else
	root=false
	echo "Owner: $owner"
fi

# set code-signing certificate
adhoc=false
if ! [[ $csc_kch ]] ; then # no certs: adhoc
	adhoc=true
	cert_choice="Ad-hoc signature"
else
	$root && csc_all="$csc_root"
	if ! [[ $csc_rootr ]] ; then # no certs for root: adhoc
		adhoc=true
		cert_choice="Ad-hoc signature"
	else # certificates found
		cert_choice=$(osascript 2>/dev/null << EOT
tell application "System Events"
	activate
	set theCertList to {}
	set theCerts to paragraphs of "$csc_all"
	repeat with aCert in theCerts
		set theCertList to theCertList & {(aCert) as string}
	end repeat
	set AppleScript's text item delimiters to return & linefeed
	set userChoice to (choose from list theCertList with prompt "Please select the code-signing certificate." with title "CodeSigner")
	return the result as string
	set AppleScript's text item delimiters to ""
end tell
EOT
		)
		if [[ $cert_choice == "false" ]] || ! [[ $cert_choice ]] ; then
			echo -e "User canceled"
			continue
		else
			[[ $cert_choice == "Ad-hoc signature" ]] && adhoc=true
		fi
	fi
fi
echo "Code-signing with: $cert_choice"

# adhoc id skip
if $adhoc ; then
	bundleid="skipped"
	echo "Skipping Bundle ID argument (ad-hoc)"
fi

# set codesign arguments
$deep && args="--deep"
if [[ $bundleid != "none" ]] && [[ $bundleid != "skipped" ]] ; then
	args="$args -i $bundleid"
fi

# look for application icon
if ! $regular ; then
	if [[ $tn_status != "osa" ]] && [[ $tn_status != "none" ]] ; then
		iplistpath="/Contents/Info.plist"
		iconfile=$(defaults read "$filepath$iplistpath" CFBundleIconFile 2>/dev/null)
		[[ $iconfile != *"."* ]] && iconfile="$iconfile.icns"
		icon_loc="$filepath/Contents/Resources/$iconfile"
		if ! [[ -f "$icon_loc" ]] ; then
			if [[ $suffix == app ]] ; then
				icon_loc="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericApplicationIcon.icns"
			elif [[ $suffix == sparsebundle ]] ; then
				icon_loc="/System/Library/CoreServices/DiskImageMounter.app/Contents/Resources/diskcopy-doc.icns"
			elif [[ $suffix == prefPane ]] ; then
				icon_loc="/Applications/System Preferences.app/Contents/Resources/PrefFile.icns"
			else # framework kext appex bundle
				icon_loc="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/KEXT.icns"
			fi
		fi
	fi
else
	if [[ $tn_status != "osa" ]] && [[ $tn_status != "none" ]] ; then
		if ! [[ $suffix ]] ; then
			icon_loc="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/ExecutableBinaryIcon.icns"
		else
			if [[ $suffix =~ ^(dmg|sparseimage)$ ]] ; then
				icon_loc="/System/Library/CoreServices/DiskImageMounter.app/Contents/Resources/diskcopy-doc.icns"
			elif [[ $suffix == dylib ]] ; then
				icon_loc="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericApplicationIcon.icns"
			else
				icon_loc="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericDocumentIcon.icns"
			fi
		fi
	fi
fi

# dequarantine
if ! [[ $(xattr -l "$filepath" | grep "com.apple.quarantine") ]] ; then
	echo "Quarantine XA: none"
else
	if $(xattr -dr com.apple.quarantine "$filepath" &>/dev/null) ; then
		echo "Quarantine XA removed"
	else
		echo "Error removing quarantine XA"
	fi
fi

# codesign procedures + xattr -cr fallback on error
if $adhoc ; then
	if $root ; then
		if ! $(osascript &>/dev/null << EOT
do shell script "codesign --force $args --sign - \"$filepath\"" with prompt "CodeSigner needs to operate with root privileges." with administrator privileges
EOT
		) ; then
			if ! $(osascript &>/dev/null << EOT
do shell script "xattr -cr \"$filepath\" ; codesign --force $args --sign - \"$filepath\"" with prompt "An error occurred. CodeSigner will try again." with administrator privileges
EOT
			) ; then
				errors=true
			else
				errors=false
			fi
		else
			errors=false
		fi
	else
		if ! $(codesign --force $args --sign - "$filepath" &>/dev/null) ; then
			if ! $(xattr -cr "$filepath" &>/dev/null ; codesign --force $args --sign - "$filepath" &>/dev/null) ; then
				errors=true
			else
				errors=false
			fi
		else
			errors=false
		fi
	fi
else
	if $root ; then
		if ! $(osascript &>/dev/null << EOT
do shell script "codesign --force $args --sign \"$cert_choice\" \"$filepath\"" with prompt "CodeSigner needs to operate with root privileges." with administrator privileges
EOT
		) ; then
			if ! $(osascript &>/dev/null << EOT
do shell script "xattr -cr \"$filepath\" ; codesign --force $args --sign \"$cert_choice\" \"$filepath\"" with prompt "An error occurred. CodeSigner will try again." with administrator privileges
EOT
			) ; then
				errors=true
			else
				errors=false
			fi
		else
			errors=false
		fi
	else
		if ! $(codesign --force $args --sign "$cert_choice" "$filepath" &>/dev/null) ; then
			if ! $(xattr -cr "$filepath" &>/dev/null ; codesign --force $args --sign "$cert_choice" "$filepath" &>/dev/null) ; then
				errors=true
			else
				errors=false
			fi
		else
			errors=false
		fi
	fi

fi

# new authority
auth_new=$(_authority)

# check for bad authorities
if [[ $auth_new == "unsigned" ]] || [[ $auth_new == "unknown" ]] || [[ $auth_new == "signed without valid root" ]] ; then
	_beep &
	echo "ERROR: codesign"
	echo "Faulty authority: $auth_new"
	_notify "❌ Error: codesign" "$nfilename"
	continue
fi

# check for errors, or compare authority with user-selected certificate (common name)
if $errors ; then
	_beep &
	echo "ERROR: codesign"
	echo "Current authority: $auth_new"
	_notify "❌ Error: codesign" "$nfilename"
else
	echo "No codesign errors"
	echo "New authority: $auth_new"
	if $adhoc ; then
		if [[ $auth_new == "ad-hoc" ]] ; then
			_success &
			echo "Code-signing successful"
			_notify "✅ Success" "$nfilename"
		else
			_beep &
			echo "ERROR: code signature mismatch!"
			_notify "❌ Error: code signature" "$nfilename"
		fi
	else
		if [[ $auth_new == $cert_choice ]] ; then
			_success &
			echo "Code-signing successful"
			_notify "✅ Success" "$nfilename"
		else
			_beep &
			echo "ERROR: code signature mismatch!"
			_notify "❌ Error: code signature" "$nfilename"
		fi
	fi
fi

done

echo "--------"
echo "Done."

exit
